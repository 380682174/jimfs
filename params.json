{"name":"Jimfs","tagline":"An in-memory file system for Java 7+","body":"Jimfs\r\n=====\r\n\r\nJimfs is an in-memory file system for Java 7 and above, implementing the\r\n[java.nio.file](http://docs.oracle.com/javase/7/docs/api/java/nio/file/package-summary.html)\r\nabstract file system APIs.\r\n\r\nGetting started\r\n---------------\r\n\r\nThe latest release is [1.0-rc1](https://github.com/google/jimfs/releases/tag/v1.0-rc1).\r\n\r\nIt is available in Maven Central as\r\n[com.google.jimfs:jimfs:1.0-rc1](http://search.maven.org/#artifactdetails%7Ccom.google.jimfs%7Cjimfs%7C1.0-rc1%7Cjar):\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.google.jimfs</groupId>\r\n  <artifactId>jimfs</artifactId>\r\n  <version>1.0-rc1</version>\r\n</dependency>\r\n```\r\n\r\nBasic use\r\n---------\r\n\r\nThe simplest way to use Jimfs is to just get a new `FileSystem` instance from the `Jimfs` class and\r\nstart using it:\r\n\r\n```java\r\nimport com.google.jimfs.Configuration;\r\nimport com.google.jimfs.Jimfs;\r\n...\r\n\r\n// For a simple file system with Unix-style paths and behavior:\r\ntry (FileSystem fs = Jimfs.newFileSystem(Configuration.unix())) {\r\n  Path foo = fs.getPath(\"/foo\");\r\n  Files.createDirectory(foo);\r\n\r\n  Path hello = foo.resolve(\"hello.txt\"); // /foo/hello.txt\r\n  Files.write(hello, ImmutableList.of(\"hello world\"), StandardCharsets.UTF_8);\r\n\r\n  // Close the FileSystem when you're done with it so it can be garbage collected.\r\n}\r\n```\r\n\r\nWhat's supported?\r\n-----------------\r\n\r\nJimfs supports almost all the APIs under `java.nio.file`. It supports:\r\n\r\n- Creating, deleting, moving and copying files and directories.\r\n- Reading and writing files with `FileChannel` or `SeekableByteChannel`, `InputStream`,\r\n  `OutputStream`, etc.\r\n- Symbolic links. Hard links to regular files.\r\n- `SecureDirectoryStream`, for operations relative to an _open_ directory.\r\n- Glob and regex path filtering with `PathMatcher`.\r\n- Watching for changes to a directory with a `WatchService`.\r\n- File attributes. Built-in attribute views that can be supported include \"basic\", \"owner\",\r\n  \"posix\", \"unix\", \"dos\", \"acl\" and \"user\". Do note, however, that not all attribute views provide\r\n  _useful_ attributes. For example, while setting and reading POSIX file permissions is possible\r\n  with the \"posix\" view, those permissions will not actually affect the behavior of the file system.\r\n\r\nLicense\r\n-------\r\n\r\n```\r\nCopyright 2013 Google Inc.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}